<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="wppetrinetze"
	xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant">
	
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="C:/eclipse"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="build.dir" value="${basedir}/bin"/>
	
	<!--EMMA testing sources -->
	<property name="coverage.dir" value="${basedir}/coverage"/>
	<property name="instrumented.bindir" value="${basedir}/instrumented.bin" description="loc. to store instrumented binaries"/>
	<!-- never used
	<property name="test-report.dir" value="${basedir}/test-results"/>
	-->
	<!--END EMMA -->
	
	<property name="ivy.dir" value="${basedir}/ivy"/>
	<property name="ivy.settings.file" value="${ivy.dir}/ivysettings.xml"/>
	<property name="ivy.cache.dir" value="${ivy.dir}/cache"/>
	
	
	<!-- Classpath definiton -->
	    <path id="wppetrinetze.classpath">
	        <pathelement path="${java.class.path}/" />
	    	<pathelement path="${basedir}/bin/" />
	        <fileset dir="${lib.dir}">
	            <include name="**/*.jar"/>
	            <include name="**/*.zip"/>
	        </fileset>
	    </path> 

    <path id="JUnit 4.libraryclasspath">
        <pathelement location="${lib.dir}/junit-4.8.2.jar"/>
        <pathelement location="${lib.dir}/hamcrest-1.1.0.jar"/>
    </path>
    <path id="wppetrinetze_addon.classpath">
        <pathelement location="${basedir}/bin"/>
        <pathelement location="lib/jung2-2_0_1/collections-generic-4.01.jar"/>
        <pathelement location="lib/jung2-2_0_1/colt-1.2.0.jar"/>
        <pathelement location="lib/jung2-2_0_1/concurrent-1.3.4.jar"/>
        <pathelement location="lib/jung2-2_0_1/jung-algorithms-2.0.1.jar"/>
        <pathelement location="lib/jung2-2_0_1/jung-api-2.0.1.jar"/>
        <pathelement location="lib/jung2-2_0_1/jung-graph-impl-2.0.1.jar"/>
        <pathelement location="lib/jung2-2_0_1/jung-visualization-2.0.1.jar"/>
        <pathelement location="lib/jung2-2_0_1/vecmath-1.3.1.jar"/>
        <path refid="JUnit 4.libraryclasspath"/>
    </path>

	
	<!-- ================================= 
	          target: resolve
	     
	     let ivy handle depencies to other projects                   
	     ================================= -->
    <target name="resolve" description="--> retrieve dependencies with ivy">
    	<ivy:settings file="${ivy.settings.file}" />
	    <ivy:resolve />
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" sync="true" />
	    <ivy:report todir="${ivy.dir}/reports"/>

		<!-- after (hopefully) retrieving all dependencies, add the tasks -->
    	
    	<!-- Emma -->
    	<taskdef classpathref="wppetrinetze.classpath" resource="emma_ant.properties"/>
    	
    	
		<!-- cobertura -->
<!--		<taskdef classpathref="tools.classpath" resource="tasks.properties"/> -->
	    <!-- JUnit -->
    	<!--		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpathref="tools.classpath" /> -->
		<!-- Checkstyle -->
    	<!--		<taskdef resource="checkstyletask.properties"   classpathref="tools.classpath"/> -->

    </target>
	
	
    <target name="init">
    	<mkdir dir="${instrumented.bindir}"/>
    	<mkdir dir="${coverage.dir}"/>
        <mkdir dir="${build.dir}"/>
        <copy includeemptydirs="false" todir="${build.dir}">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    	
        <copy includeemptydirs="false" todir="${build.dir}">
            <fileset dir="test">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    	
    </target>
	
	
    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>
	
    <target depends="clean" name="cleanall"/>
	
	
    <target name="build" depends="init,resolve,build-subprojects,build-project,junit-test"/>
	

	<target name="build-subprojects"/>
	
	<!-- ================================= 
          target: instrument-java              
         ================================= -->
	
	<target name="instrument-java" depends="resolve">
		<emma enabled="true">
			<instr instrpath="${build.dir}" destdir="${instrumented.bindir}" metadatafile="${coverage.dir}/metadata.emma" merge="true">
				<filter excludes="au.com.jenisys.view.*"/>
			</instr>
		</emma>
	</target>
	
	
	<!-- ================================= 
          target: junit-test              
         ================================= -->
    <target name="junit-test" depends="build-project,instrument-java" description="run junit test">
    	<echo message="performing junit-tests"/>
    	<junit>
    		
    		<classpath> 
    			<path refid="wppetrinetze.classpath"/>
    			<pathelement path="${instrumented.bindir}"/>
    			<pathelement path="${build.dir}"/>
    		</classpath>
    		<formatter type="xml"/>
    		<formatter type="plain" usefile="false"/>
    		
    		<test name="harness.AllTests" todir="${basedir}" />
    		
    	</junit>
    </target>

	
    <target name="build-project" depends="init">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="${build.dir}" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="wppetrinetze.classpath"/>
        </javac>
        <javac debug="true" debuglevel="${debuglevel}" destdir="${build.dir}" source="${source}" target="${target}">
            <src path="test"/>
            <classpath refid="wppetrinetze.classpath"/>
        </javac>
    </target>

	<target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target name="Main">
        <java classname="gui.Main" failonerror="true" fork="yes">
            <classpath refid="wppetrinetze.classpath"/>
        </java>
    </target>
</project>
